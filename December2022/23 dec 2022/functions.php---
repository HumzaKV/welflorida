<?php
if (isset($_GET['debug'])) {
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);
}

define('THEME_PATH', get_template_directory());
define('THEME_URL', get_template_directory_uri());

require_once THEME_PATH . '/functions/gf_column.php';
require_once THEME_PATH . '/functions/post-type.php';
require_once THEME_PATH . '/functions/shortcodes.php';

function theme_files()
{
    // Theme Files
    wp_register_style('theme-style', get_stylesheet_uri(), false, null);
    wp_enqueue_style('theme-style');
    wp_register_style('theme-styler', get_stylesheet_directory_uri() . '/css/responsive.css', false, null);
    wp_enqueue_style('theme-styler');
    wp_register_style('font-css', get_stylesheet_directory_uri() . '/css/fonts.css', false, null);
    wp_enqueue_style('font-css');

    // Owl Carousel Files
    wp_register_style('owl-carousel', get_stylesheet_directory_uri() . '/owl-carousel/owl.carousel.css', false, '2.2.1');
    wp_enqueue_style('owl-carousel');
    wp_register_script('owl-carousel', get_stylesheet_directory_uri() . '/owl-carousel/owl.carousel.js', array('jquery'), '2.2.1', true);
    wp_enqueue_script('owl-carousel');

    // PrettyPhoto
    wp_register_style('prettyphoto', get_stylesheet_directory_uri() . '/prettyphoto/css/prettyPhoto.css', false);
    wp_enqueue_style('prettyphoto');
    wp_register_script('prettyphoto', get_stylesheet_directory_uri() . '/prettyphoto/jquery.prettyPhoto.js', array('jquery'), '3.1.6', true);
    wp_enqueue_script('prettyphoto');

    wp_register_script('kv-script', get_stylesheet_directory_uri() . '/kv-script.js', array('jquery'), true);
    wp_enqueue_script('kv-script');

    // Font Awesome
    wp_register_script('fontawesome', '//use.fontawesome.com/96bc47e5c3.js', true);
    wp_enqueue_script('fontawesome');
}

add_action('wp_enqueue_scripts', 'theme_files');

function kv_fix_gform_chosen_mobile()
{

    wp_deregister_script('gform_chosen');
    wp_register_script('gform_chosen', 'https://cdn.jsdelivr.net/npm/chosen.jquery-fixes@0.1.0/chosen.jquery-fixes.js', array(
        'jquery'
    ), '1.10.0-fix', true);
}

add_action('init', 'kv_fix_gform_chosen_mobile', 11);

// Enable Classic Editor
add_filter('use_block_editor_for_post', '__return_false', 10);

// Theme Options
if (function_exists('acf_add_options_page')) {
    acf_add_options_page(array(
        'page_title' => 'Theme Options',
        'menu_title' => 'Theme Options',
        'menu_slug' => 'theme-pptions',
        'capability' => 'edit_posts',
        'redirect' => false
    ));
}
add_action('admin_head', 'custom_css');
function custom_css()
{
    ?>
    <style type="text/css">
        ul.pagination.backend-event {
            float: right;
            display: flex;
        }

        ul.pagination.backend-event li {
            padding: 0px 3px;
            margin: 0px;
        }

        ul.pagination.backend-event li:last-child {
            padding-right: 0px;
        }

        ul.pagination.backend-event li a {
            text-decoration: none;
            margin: 0px;
            background-color: #064b91;
            color: #fff;
            padding: 2px 8px;
        }

        ul.pagination.backend-event li a:hover {
            background-color: #000;
            transition: 0.2s;
        }
    </style>
    <script type="text/javascript">
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;
            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');
                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
        };
        // if (getUrlParameter('checkout') == 1) {
        //       jQuery('html,body').animate({
        //           scrollTop: jQuery("#scroll_attendees").offset().top
        //       }, 'slow');
        //   }
        // jQuery("#scroll_to_details").click(function(e){
        // e.preventDefault();
        // jQuery('html, body').animate({
        //         scrollTop: jQuery("#scroll_attendees").offset().top
        //     }, 1000);
        // });
    </script>
    <?php
}

// Register Sidebar
add_action('widgets_init', 'kv_widgets_init');
function kv_widgets_init()
{
    $sidebar_attr = array(
        'name' => '',
        'before_widget' => '<li id="%1$s" class="widget %2$s">',
        'after_widget' => '</li>',
        'before_title' => '<h2 class="widgettitle">',
        'after_title' => '</h2>',
    );
    $sidebar_id = 0;
    $gdl_sidebar = array("Blog", "Footer 1", "Footer 2", "Footer 3", "Footer 4", "Search");
    foreach ($gdl_sidebar as $sidebar_name) {
        $sidebar_attr['name'] = $sidebar_name;
        $sidebar_attr['id'] = 'custom-sidebar' . $sidebar_id++;
        register_sidebar($sidebar_attr);
    }
}

// Register Navigation
function register_menu()
{
    register_nav_menu('main-menu', __('Main Menu'));
}

add_action('init', 'register_menu');

// Image Crop
function codex_post_size_crop()
{
    add_image_size("packages_image", 300, 200, true);
    add_image_size("event_images", 397, 729, true);
    add_image_size("member_list", 228, 228, true);
    add_image_size("event_listing_img", 150, 150, true);


}

add_action("init", "codex_post_size_crop");

// Featured Image Function
add_theme_support('post-thumbnails');

// raza code 01-09-2020
add_action('admin_menu', 'admin_register_menu');
function admin_register_menu()
{
    add_submenu_page('edit.php?post_type=events', __('User Enroll'), __('Event Listings'), 'manage_options', 'enroll-listings', 'wp_admin_enroll_listing_page');
    add_submenu_page('edit.php?post_type=events', __('Register Event'), __('Register Event'), 'manage_options', 'register-event', function () {
        require(locate_template('admin/register-event.php'));
    });

}

function wp_admin_enroll_listing_page()
{
    require(locate_template('enroll-listings.php'));
}


if (function_exists('acf_add_options_page')) {
    acf_add_options_sub_page(array(
        'page_title' => 'Mail Setting',
        'menu_title' => 'Mail Setting',
        'parent_slug' => 'edit.php?post_type=events',
    ));
}

add_action("wp_head", "custom_script");

function custom_script()
{
    ?>
    <script type="text/javascript">
        jQuery(function ($) {
            jQuery(".gfield_list_19_cell1").find('[aria-label="First Name"]').attr("placeholder", "First Name");
            jQuery(".gfield_list_19_cell2").find('[aria-label="Middle Name"]').attr("placeholder", "Middle Name");
            jQuery(".gfield_list_19_cell3").find('[aria-label="Last Name"]').attr("placeholder", "Last Name");
            jQuery(".gfield_list_19_cell4").find('[aria-label="Company Name"]').attr("placeholder", "Company Name");
            jQuery(".gfield_list_19_cell7").find('[aria-label="Phone"]').attr("placeholder", "Phone");
            jQuery(".gfield_list_19_cell8").find('[aria-label="Email"]').attr("placeholder", "Email");
            jQuery(".gfield_list_19_cell5").find('select[name="input_19[]"]').attr("placeholder", "Email");

            jQuery('.gfield_list_cell').each(function () {
                var $this = jQuery(this),
                    $tr = jQuery('tr', $this.parent().parent().prev()),
                    i = $this.index();
                jQuery('input', $this).attr('placeholder', jQuery('th:eq(' + i + ')', $tr).text());
                jQuery('select', $this).prepend('<option value="" selected>' + jQuery('th:eq(' + i + ')', $tr).text() + '</option>');
            });
            jQuery('#ginput_quantity_1_5').val("1");
            var value = jQuery('#ginput_quantity_1_30').val();

            if (value == "1") {
                $(document).on("change", "#choice_1_42_0", function () {
                    $('#ginput_quantity_1_30').val("2");
                    jQuery('#ginput_quantity_1_30').change();


                })

                $(document).on("change", "#choice_1_42_1", function () {
                    $('#ginput_quantity_1_30').val("1");
                    jQuery('#ginput_quantity_1_30').change();
                })
            }
            // Member
            else if (value == "0" || value == '') {
                // Yes
                $(document).on("change", "#choice_1_42_0", function () {
                    $('#ginput_quantity_1_30').val("1");
                    jQuery('#ginput_quantity_1_30').change();
                })

                $(document).on("change", "#choice_1_42_1", function () {
                    $('#ginput_quantity_1_30').val("0");
                    jQuery('#ginput_quantity_1_30').change();
                })
            }

            // var inc=1;
            <?php printf('var inc = %s;', isset($_GET['id1'], $_GET['id2']) ? 1 : 2); ?>
            $(document).on("click", ".add_list_item", function () {
                var quantity = $("#ginput_quantity_1_30");


                // var a = quantity.val();
                console.log(inc);
                inc += 1;
                console.log(inc);
                quantity.val(parseInt(inc));
                jQuery('#ginput_quantity_1_30').change();

            });
            var isdelete = false;


            $(document).on("click", ".delete_list_item", function () {
                // if(!isdelete){
                // 	isdelete=true;
                // }
                // else{
                // 	isdelete=true;
                // 	return false;
                // }
                var rooms = $("#ginput_quantity_1_30");

                // inc--;
                // var a = rooms.val();
                if (inc >= 1) {
                    inc--;
                    rooms.val(parseInt(inc));
                    jQuery('#ginput_quantity_1_30').change();

                } else {
                    $(".delete_list_item").prop("disabled", true);
                }
            });
            // gf ticket purchase quantity read only
            jQuery("#ginput_quantity_1_30").prop("readonly", true);


            // return total ;

        });
    </script>
    <?php
}

add_action('gform_after_submission_1', 'endo_add_entry_to_db', 10, 2);
function dateToCal($time)
{
    return date('Ymd\This', $time) . 'Z';
}

function endo_add_entry_to_db($entry, $form)
{
    global $wpdb;

    $post_id = $entry['53'];
    $results = $wpdb->get_results(" SELECT * from wp_acf_data WHERE post_id='" . $post_id . "' AND available_for ='member' AND status=1");
    $location = $results[0]->location;
    $dynamic_text_area = $results[0]->description;
    $start_date = get_field("start_date", $entry["post_id"]);
    $date = date('m-d-Y', strtotime($start_date));
    $time = date('h:i:s a', strtotime($start_date));
    $end_date = get_field("end_date", $entry["post_id"]);
    $post_title_name = get_the_title($post_id);
    $calendar_start_date = date_i18n(('Ymd\THis\Z'), strtotime($start_date), true);
    $calendar_end_date = date_i18n(('Ymd\THis\Z'), strtotime($end_date), true);
    $isguest = rgar($entry, '42');
    $total_price = $entry['16'];
    $payment_gateway = $form['fields']['16']->type;
    // if($total_price==0 ){
    // 	$total_price=0;
    // 	$payment_gateway="-";
    // 	if ($isguest=='Yes') {
    // 	$total_price=$entry['16'];
    // 	$payment_gateway=$form['fields']['16']->type;
    // 	}

    // }
    if (!$entry['transaction_id']) {
        $entry['transaction_id'] = '-';
    }
    $member_guest = 'Guest';
    if (isset($_GET['id1']) && isset($_GET['id2'])) {
        $member_guest = 'Member';
        if ($total_price == 0) {
            $total_price = 0;
            $payment_gateway = "-";
            if ($isguest == 'Yes') {
                $total_price = $entry['16'];
                $payment_gateway = $form['fields']['16']->type;
            }

        }
    }


    $parent_table = array(
        'id' => $entry['id'],
        'user_id' => $entry['52'],
        'event_id' => $entry['53'],
        'ticket_id' => 0,
        'guest_ticket_id' => 0,
        'member_guest' => $member_guest,
        'b_name' => $entry['2.3'] . " " . $entry['2.4'] . " " . $entry['2.6'],
        'company' => $entry['12'],
        'position' => $entry['59'],
        'role' => $entry['56'],
        'phone' => $entry['3'],
        'price' => $total_price,
        'transaction_id' => $entry['transaction_id'],
        'payment_gateway' => $payment_gateway,
        'address' => $entry['4.1'] . " " . $entry['4.2'] . " " . $entry['4.3'] . " " . $entry['4.4'] . " " . $entry['4.5'],
        'option_in_out' => $entry['41.1'],
        'email' => $entry['8'],
        'created_at' => $entry['date_created'],
    );

    $wpdb->insert('wp_gf_custom', $parent_table);

    // $price=$entry['5.2'];
    // $address=$entry['4.1']." ".$entry['4.2']." ".$entry['4.3']." ".$entry['4.4']." ".$entry['4.5'];
    // $email=$entry['8'];
    // $created_at=$entry['date_created'];
    // $company=$entry['12'];
    // $position=$entry['40'];
    // $role=$entry['14'];
    // $phone=$entry['3'];
    // $option_in_out=$entry['41.1'];
    // $id=$entry['287'];
    // $user_id=$entry['52'];
    // $b_name=$entry['2.3']." ".$entry['2.4']." ".$entry['2.6'];
    // $event_id=$entry['53'];
    $data = array();
    $list_values = is_serialized(rgar($entry, '19')) ? unserialize(rgar($entry, '19')) : array();

    $isguest = rgar($entry, '42');


    if (isset($_GET['id1']) && isset($_GET['id2'])) {
        if ($isguest == "Yes") {
            $isguestprice = rgar($entry, '30.2');
            $ticket_id_guest = $_GET['id2'];
            $array = array(

                'ticket_id' => $ticket_id_guest,
                'price' => $isguestprice

            );
            foreach ($list_values as $key => $value) {

                $data[$key] = array_merge($list_values[$key], $array);


            }

            foreach ($data as $key => $value) {
                $dataa = array(
                    'entry_id' => $entry['id'],
                    'ticket_id' => $value['ticket_id'],
                    'price' => $value['price'],
                    'memberOrguest' => "guest",
                    'f_name' => $value['First Name'],
                    'm_name' => $value['Middle Name'],
                    'l_name' => $value['Last Name'],
                    'company_name' => $value['Company Name'],
                    'position_title' => $value['Position/Title'],
                    'role' => $value['Role'],
                    'phone' => $value['Phone'],
                    'email' => $value['Email'],
                );

                if (get_current_user_id()) {
                    $uid = get_current_user_id();
                } else {
                    $uid = 0;
                }
                $wpdb->insert('wp_gf_custom_child', $dataa);
                $price = $entry['5.2'];
                $username = $value['First Name'] . " " . $value['Last Name'];
                // $message_url="https://www.google.com/calendar/render?action=TEMPLATE&text=".$post_title_name."&dates=".$calendar_start_date."/".$calendar_end_date."&details=".$dynamic_text_area."&location=".$location."&sf=true&output=xml";
                // $message_outlook="https://outlook.live.com/owa/?path=/calendar/action/compose&rru=addevent&subject=".$post_title_name."&startdt=".$calendar_start_date."&enddt=".$calendar_end_date."&body=".$dynamic_text_area.", time: ".$post_title_name."&location=".$location."";

                $title_name = sanitize_title($post_title_name);
                // $uid = $post_id;
                $filename = $title_name . "-" . $uid . ".ics";
                $message_url = get_stylesheet_directory_uri() . '/eventicsfiles/' . $filename;
                $message_outlook = $message_url;

                $headers .= "MIME-Version: 1.0\r\n";
                $headers .= "From: WeLFlorida <info@welflorida.org>\r\n";
                $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
                $subject = "You are registered";
                $message .= "";
                $message .= "<p style='text-align: center; padding: 10px 0; margin: 0;'><img class='size-full wp-image-11558 aligncenter' src='" . home_url('/wp-content/uploads/2021/01/wel-logo.png') . "' alt='' width='250' height='80' /></p>";

                $message .= "<div style='width:550px; margin:0 auto;  padding: 10px;' class='main_row container-full'><div class='body'>
						<h3>Dear $username</h3>
						<p><strong>Thank you for registering for $post_title_name</strong></p>
						<p>Date: $date </p>
						<p>Time: $time</p>
						<p>Location: $location</p>
						<p>Add to Google:  <a href='$message_url'>Click Follow Link To Add Google Calendar.</a></p>
						<p>Add to Outlook:  <a href='$message_outlook'>Click Follow Link To Add Outlook Calendar.</a></p>
						<p>Please contact WEL’s Administrator, Meredith Williams at:  <a href='mailto:info@welflorida.org' target='_blank'>info@welflorida.org</a> if you need any assistance.</p>
						<p>Thank you.</p>
						</div>
						<div  style='text-align: center; color: #fff; background: #000; padding: 5px 0;''>
							<p>Copyright ©2020 All right Reserved</p>
						</div>
						</div>";
                $user_email = $value['Email'];

                wp_mail($user_email, $subject, $message, $headers);
            }


        }

        $ismemberprice = rgar($entry, '5.2');

        $ticket_id_member = $_GET['id1'];
        $onlymember = array(
            'entry_id' => $entry['id'],
            'ticket_id' => $ticket_id_member,
            'price' => $ismemberprice,
            'memberOrguest' => "member",
            'f_name' => rgar($entry, '2.3'),
            'm_name' => rgar($entry, '2.4'),
            'l_name' => rgar($entry, '2.6'),
            'company_name' => rgar($entry, '12'),
            'position_title' => rgar($entry, '59'),
            'role' => rgar($entry, '14'),
            'phone' => rgar($entry, '3'),
            'email' => rgar($entry, '8'),

        );

        $wpdb->insert('wp_gf_custom_child', $onlymember);

    } else {
        if ($isguest == "Yes") {
            $isguestprice = rgar($entry, '30.2');
            $ticket_id_guest = $_GET['id2'];
            $array = array(

                'ticket_id' => $ticket_id_guest,
                'price' => $isguestprice

            );
            foreach ($list_values as $key => $value) {

                $data[$key] = array_merge($list_values[$key], $array);


            }

            foreach ($data as $key => $value) {
                $dataa = array(
                    'entry_id' => $entry['id'],
                    'ticket_id' => $value['ticket_id'],
                    'price' => $value['price'],
                    'memberOrguest' => "guest",
                    'f_name' => $value['First Name'],
                    'm_name' => $value['Middle Name'],
                    'l_name' => $value['Last Name'],
                    'company_name' => $value['Company Name'],
                    'position_title' => $value['Position/Title'],
                    'role' => $value['Role'],
                    'phone' => $value['Phone'],
                    'email' => $value['Email'],
                );
                $wpdb->insert('wp_gf_custom_child', $dataa);
                $price = $entry['5.2'];
                $username = $value['First Name'] . " " . $value['Last Name'];
                // $message_url="https://www.google.com/calendar/render?action=TEMPLATE&text=".$post_title_name."&dates=".$calendar_start_date."/".$calendar_end_date."&details=".$dynamic_text_area."&location=".$location."&sf=true&output=xml";
                // $message_outlook="https://outlook.live.com/owa/?path=/calendar/action/compose&rru=addevent&subject=".$post_title_name."&startdt=".$calendar_start_date."&enddt=".$calendar_end_date."&body=".$dynamic_text_area.", time: ".$post_title_name."&location=".$location."";
                if (get_current_user_id()) {
                    $uid = get_current_user_id();
                } else {
                    $uid = 0;
                }
                $title_name = sanitize_title($post_title_name);
                // $uid = $post_id;
                $filename = $title_name . "-" . $uid . ".ics";
                $message_url = get_stylesheet_directory_uri() . '/eventicsfiles/' . $filename;
                $message_outlook = $message_url;

                $headers .= "MIME-Version: 1.0\r\n";
                $headers .= "From: WeLFlorida <info@welflorida.org>\r\n";
                $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
                $subject = "You are registered";
                $message .= "";
                $message .= "<p style='text-align: center; padding: 10px 0; margin: 0;'><img class='size-full wp-image-11558 aligncenter' src='" . home_url('/wp-content/uploads/2021/01/wel-logo.png') . "' alt='' width='250' height='80' /></p>";

                $message .= "<div style='width:550px; margin:0 auto;  padding: 10px;' class='main_row container-full'><div class='body'>
						<h3>Dear $username</h3>
						<p><strong>Thank you for registering for $post_title_name</strong></p>
						<p>Date: $date </p>
						<p>Time: $time </p>
						<p>Location: $location</p>
						<p>Add to Google:  <a href='$message_url'>Click Follow Link To Add Google Calendar.</a></p>
						<p>Add to Outlook:  <a href='$message_outlook'>Click Follow Link To Add Outlook Calendar.</a></p>
						<p>Please contact WEL’s Administrator, Meredith Williams at:  <a href='mailto:info@welflorida.org' target='_blank'>info@welflorida.org</a> if you need any assistance.</p>
						<p>Thank you.</p>
						</div>
						<div  style='text-align: center; color: #fff; background: #000; padding: 5px 0;''>
							<p>Copyright ©2020 All right Reserved</p>
						</div>
						</div>";
                $user_email = $value['Email'];

                wp_mail($user_email, $subject, $message, $headers);
            }
        }
        $isguestprice = rgar($entry, '30.2');
        $ticket_id_guest = $_GET['id2'];
        $onlyguest = array(
            'entry_id' => $entry['id'],
            'ticket_id' => $ticket_id_guest,
            'price' => $isguestprice,
            'memberOrguest' => "guest",
            'f_name' => rgar($entry, '2.3'),
            'm_name' => rgar($entry, '2.4'),
            'l_name' => rgar($entry, '2.6'),
            'company_name' => rgar($entry, '12'),
            'position_title' => rgar($entry, '59'),
            'role' => rgar($entry, '14'),
            'phone' => rgar($entry, '3'),
            'email' => rgar($entry, '8'),

        );
        // print_r($onlyguest);
        // die;
        $wpdb->insert('wp_gf_custom_child', $onlyguest);

    }


    // 	// add calender send mail to user
    $post_id = $entry['53'];
    $results = $wpdb->get_results(" SELECT * from wp_acf_data WHERE post_id='" . $post_id . "' AND available_for ='member' AND status=1");
    $location = $results[0]->location;
    $dynamic_text_area = $results[0]->description;

    $user_name = $entry['2.3'] . " " . $entry['2.6'];
    $post_title_name = get_the_title($post_id);
    $total_price = "$" . $entry['16'];
    $user_email = rgar($entry, '8');
    $start_date = get_field("start_date", $entry["post_id"]);
    $end_date = get_field("end_date", $entry["post_id"]);
    $title = get_field("sub_title", $entry["post_id"]);
    $calendar_start_date = date_i18n(('Ymd\THis\Z'), strtotime($start_date), true);
    $calendar_end_date = date_i18n(('Ymd\THis\Z'), strtotime($end_date), true);

    // $calendar_start_date = gmDate("Ymd\THis\Z",strtotime($start_date));
    // $calendar_end_date = gmDate("Ymd\THis\Z",strtotime($end_date));

    // $calendar_start_date = gmDate("Ymd\THis\Z",strtotime($start_date));
    // $calendar_end_date = gmDate("Ymd\THis\Z",strtotime($end_date));
    // $message_url="https://www.google.com/calendar/render?action=TEMPLATE&text=".$title."&dates=".$calendar_start_date."/".$calendar_end_date."&details=".$dynamic_text_area."&location=".$location."&sf=true&output=xml";
    // $message_outlook="https://outlook.live.com/owa/?path=/calendar/action/compose&rru=addevent&subject=".$title."&startdt=".$calendar_start_date."&enddt=".$calendar_end_date."&body=".$dynamic_text_area.", time: ".$title."&location=".$location."";
    if (get_current_user_id()) {
        $uid = get_current_user_id();
    } else {
        $uid = 0;
    }
    $title_name = sanitize_title($post_title_name);
    // $uid = $post_id;
    $filename = $title_name . "-" . $uid . ".ics";
    $message_url = get_stylesheet_directory_uri() . '/eventicsfiles/' . $filename;
    $message_outlook = $message_url;

    // $user_email = $user_email;
    $headers = "";
    $message = "";
    $headers .= "MIME-Version: 1.0\r\n";
    $headers .= "From: WeLFlorida <info@welflorida.org>\r\n";
    $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
    $message .= "";
    $message .= "<p style='text-align: center; padding: 10px 0; margin: 0;'><img class='size-full wp-image-11558 aligncenter' src='" . home_url('/wp-content/uploads/2021/01/wel-logo.png') . "' alt='' width='250' height='80' /></p>";

    $message .= "<div style='width:550px; margin:0 auto;  padding: 10px;' class='main_row container-full'><div class='body'>
						<h3>Dear $user_name</h3>
						<p><strong>Thank you for registering for $post_title_name</strong></p>
						<p>Date: $date </p>
						<p>Time: $time</p>
						<p>Location: $location</p>
						<p>Add to Google:  <a href='$message_url'>Click Follow Link To Add Google Calendar.</a></p>
						<p>Add to Outlook:  <a href='$message_outlook'>Click Follow Link To Add Outlook Calendar.</a></p>
						<p>Please contact WEL’s Administrator, Meredith Williams at:  <a href='mailto:info@welflorida.org' target='_blank'>info@welflorida.org</a> if you need any assistance.</p>
						<p>Thank you.</p>
						</div>
						<div  style='text-align: center; color: #fff; background: #000; padding: 5px 0;''>
							<p>Copyright ©2020 All right Reserved</p>
						</div>
						</div>";


    $subject = "You are registered";
    wp_mail($user_email, $subject, $message, $headers);
    // end add calender send mail to user

}


add_action('admin_enqueue_scripts', 'admin_register_script_style');
function admin_register_script_style()
{
    wp_enqueue_script('jquery-ui-datepicker');
    wp_register_style('jquery-ui', '//code.jquery.com/ui/1.11.2/themes/smoothness/jquery-ui.css');
    wp_enqueue_style('jquery-ui');

}


add_action('save_post', 'save_acf_data', 10, 3);
function save_acf_data($post_id, $post, $update)
{

    if (wp_is_post_revision($post_id) || empty($_POST) || $post->post_type != 'events')
        return;
    global $wpdb;
    $tablename = $wpdb->prefix . 'acf_data';
    $fields = get_field('ticket', $post_id);
    $eventStart = get_field('start_date', $post_id);
    $eventEnd = get_field('end_date', $post_id);
    $eventCoupon = get_field('coupon', $post_id);


    // $fieldsdate = get_field('date', $post_id);
    // $fields_starttime = get_field('start_time', $post_id);
    // $fields_endtime = get_field('start_time', $post_id);
    // $e_data = array('e_date' => $fieldsdate, 'e_start_time' => $fields_starttime,'e_end_date'=>$fields_endtime );


    if ($_POST['original_publish'] == "Publish") {
        // Save Query
        foreach ($fields as $key => $value) {
            $lastid = $wpdb->insert_id;
            $group = $value['public'];
            if ($group['availabilty'] == 'yes') {
                $group['availabilty'] = 1;
            } else {
                $group['availabilty'] = 0;
            }
            $data = array(
                'post_id' => $post_id,
                'name' => $group['name'],
                'description' => $group['description'],
                'available_for' => $group['available_for'],
                'available_from_time' => $group['available_from_time'],
                'available_from_date' => date("m-d-Y", strtotime($group['available_from_date'])),
                'available_until_time' => $group['available_until_time'],
                'available_until_date' => date("m-d-Y", strtotime($group['available_until_date'])),
                'price' => $group['price'],
                'spaces' => $group['spaces'],
                'location' => $group['location'],
                'uniq_id' => $lastid,
                'status' => $group['availabilty'],
                'e_start' => $eventStart,
                'e_end' => $eventEnd,
                'coupon' => $eventCoupon
            );
            $wpdb->insert($tablename, $data);
            update_post_meta($post_id, 'ticket_' . $key . '_public_uniq-id', $lastid);
        }
    } else {
//        echo '<pre>' . print_r($fields, 1) . '</pre>';
//        die;
        foreach ($fields as $key => $value) {
            $group = $value['public'];
            $ticket_id = get_post_meta($post_id, 'ticket_' . $key . '_public_uniq-id', $single = true);
            // $enroll_query = $wpdb->get_results(" SELECT wp_acf_data.id FROM wp_acf_data LEFT OUTER JOIN wp_postmeta ON wp_acf_data.uniq_id = wp_postmeta.meta_value WHERE wp_postmeta.meta_value IS NULL ");

            if ($group['availabilty'] == 'yes') {
                $group['availabilty'] = 1;
            } else {
                $group['availabilty'] = 0;
            }

            $data = array('post_id' => $post_id,
                'name' => $group['name'],
                'description' => $group['description'],
                'available_for' => $group['available_for'],
                'available_from_time' => $group['available_from_time'],
                'available_from_date' => date("m-d-Y", strtotime($group['available_from_date'])),
                'available_until_time' => $group['available_until_time'],
                'available_until_date' => date("m-d-Y", strtotime($group['available_until_date'])),
                'price' => $group['price'],
                'spaces' => $group['spaces'],
                'location' => $group['location'],
                'status' => $group['availabilty'],
                'e_start' => $eventStart,
                'e_end' => $eventEnd,
                'coupon' => $eventCoupon
            );

            $wpdb->update('wp_acf_data', $data, array('uniq_id' => $group['uniq-id']));
            $result = $wpdb->get_results(" SELECT wp_acf_data.uniq_id FROM wp_acf_data where uniq_id =" . $group['uniq-id']);
            if (!empty($result)) {
                continue;
            }
//            $lastid = $wpdb->insert_id;
            $group = $value['public'];
            if ($group['availabilty'] == 'yes') {
                $group['availabilty'] = 1;
            } else {
                $group['availabilty'] = 0;
            }
            $data = array(
                'post_id' => $post_id,
                'name' => $group['name'],
                'description' => $group['description'],
                'available_for' => $group['available_for'],
                'available_from_time' => $group['available_from_time'],
                'available_from_date' => date("m-d-y", strtotime($group['available_from_date'])),
                'available_until_time' => $group['available_until_time'],
                'available_until_date' => date("m-d-y", strtotime($group['available_until_date'])),
                'price' => $group['price'],
                'spaces' => $group['spaces'],
                'location' => $group['location'],
                'uniq_id' => $group['uniq-id'],
                'status' => $group['availabilty'],
                'e_start' => $eventStart,
                'e_end' => $eventEnd,
                'coupon' => $eventCoupon
            );
            $wpdb->insert($tablename, $data);
            update_post_meta($post_id, 'ticket_' . $key . '_public_uniq-id', $group['uniq-id']);
        }
        $enroll_query = $wpdb->get_results(" SELECT wp_acf_data.uniq_id FROM wp_acf_data where uniq_id NOT IN(SELECT meta_value from wp_postmeta)");
        if ($enroll_query[0]->uniq_id) {
            foreach ($enroll_query as $value) {
                $wpdb->update('wp_acf_data', array('status' => 0), array('uniq_id' => $value->uniq_id));
            }
        }
    }
}

// for location of event
function my_acf_init()
{
    acf_update_setting('google_api_key', '');
}

add_action('acf/init', 'my_acf_init');

// add_action( 'wp_footer', 'field_delete_for_member' );
function field_delete_for_member()
{
    ?>
    <script type="text/javascript">
        jQuery('#ginput_quantity_1_5').val("1");
        jQuery('#ginput_quantity_1_30').val("0");

        jQuery("#input_1_29").change(function () {
            var val, tbody, row, additionalRows;
            val = jQuery(this).val();
            jQuery(".gfield_list_container").find("tbody tr:gt(0)").remove();
            jQuery('#ginput_quantity_1_30').val(parseInt(val));
            jQuery('#ginput_quantity_1_30').change();
            // jQuery(document).on("click","#input_1_29",function() {
            // 	jQuery('#ginput_quantity_1_5').val(val);
            // })
            tbody = jQuery('#field_1_19 table tbody');
            console.log(tbody);

            row = tbody.find('tr:last');
            additionalRows = new Array(parseInt(val)).join(row[0].outerHTML);
            tbody.append(additionalRows);
        })

    </script>

    <?php
}

require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

$main_sql_create = "CREATE TABLE `wp_acf_data` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `post_id` int(11) NOT NULL,
 `name` varchar(255) NOT NULL,
 `description` varchar(255) NOT NULL,
 `available_for` varchar(255) NOT NULL,
 `available_from_time` varchar(255) NOT NULL,
 `available_from_date` varchar(255) NOT NULL,
 `available_until_time` varchar(255) NOT NULL,
 `available_until_date` varchar(255) NOT NULL,
 `price` varchar(255) NOT NULL,
 `spaces` varchar(255) NOT NULL,
 `location` varchar(255) NOT NULL,
 `uniq_id` int(11) DEFAULT NULL,
 `status` tinyint(1) NOT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=158 DEFAULT CHARSET=utf8mb4";
maybe_create_table('wp_acf_data', $main_sql_create);

$main_sql_create = "CREATE TABLE `wp_gf_custom` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `ticket_id` int(11) NOT NULL,
 `company` varchar(255) NOT NULL,
 `position` varchar(255) NOT NULL,
 `role` varchar(255) NOT NULL,
 `phone` varchar(255) NOT NULL,
 `b_name` varchar(255) NOT NULL,
 `price` varchar(255) NOT NULL,
 `address` varchar(255) NOT NULL,
 `option_in_out` tinyint(1) NOT NULL,
 `email` varchar(255) NOT NULL,
 `created_at` date DEFAULT NULL,
 `status` tinyint(1) DEFAULT NULL,
 `withdraw_date` date DEFAULT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8mb4";
maybe_create_table('wp_gf_custom', $main_sql_create);

$main_sql_create = "CREATE TABLE `wp_gf_custom2` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `subject` varchar(255) NOT NULL,
 `message` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4";
maybe_create_table('wp_gf_custom2', $main_sql_create);

$main_sql_create = "CREATE TABLE `wp_gf_custom_child` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `transaction_id` int(11) NOT NULL,
 `name` varchar(255) NOT NULL,
 `email` varchar(255) NOT NULL,
 `phone` varchar(255) NOT NULL,
 PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4";
maybe_create_table('wp_gf_custom_child', $main_sql_create);

function mepr_add_some_tabs($user)
{
    ?>


    <span>
      <!-- REDIRECTS THE USER TO A DIFFERENT PAGE ON THE SITE -->
      <a href="#">Profile</a>
    </span>
    <?php
}

// add_action('mepr_account_nav', 'mepr_add_some_tabs');

add_filter('gform_validation_1', 'custom_validation');
function custom_validation($validation_result)
{
    global $post, $wpdb;
    $registered_emails = array();
    $email = $_POST['input_8'];
    $post_id = get_the_ID();
    $coupon_used = $_POST['input_60'];
    $wp_gf_custom = $wpdb->get_results(" SELECT * from wp_gf_custom WHERE event_id='" . $post_id . "' AND status=0");

    if ($wp_gf_custom) {
        foreach ($wp_gf_custom as $key => $value) {
            $registered_emails[] = $value->email;
        }
    }
    $check_email = in_array($email, $registered_emails);

    if ($check_email) {
        $form = $validation_result["form"];

        $validation_result["is_valid"] = false;
        $validation_result["form"]["fields"][8]["failed_validation"] = true;
        $validation_result["form"]["fields"][8]["validation_message"] = "You already purchased this event";

        $validation_result["form"] = $form;

        return $validation_result;
    }

    $results = $wpdb->get_results(" SELECT * from wp_acf_data WHERE post_id='" . $post->ID . "' AND available_for='guest' AND status=1 ");
    $results_count = $wpdb->get_results("SELECT COUNT(wp_gf_custom.ticket_id) AS NumberOfTicketId FROM wp_gf_custom LEFT JOIN wp_gf_custom_child ON wp_gf_custom.id = wp_gf_custom_child.entry_id WHERE wp_gf_custom.event_id = '" . $post->ID . "' AND wp_gf_custom_child.memberOrguest='guest' AND wp_gf_custom.status = 0");
    $total_spaces = $results[0]->spaces;
    $total_booking = $results_count[0]->NumberOfTicketId;
    if (isset($_GET['id1']) && isset($_GET['id2'])) {
        $remaining = $total_spaces - $total_booking;
        $message = "only" . $remaining;
    } else {
        $remaining = $total_spaces - $total_booking;
        if ($remaining == 1) {
            $message = "Sorry " . $remaining;
        }
    }

    $form = $validation_result['form'];
    $count = is_array(rgpost('input_19')) ? rgpost('input_19') : array();

    // if( sizeof($count) > 0 ){
    $count = sizeof($count);
    // }
    $count = ($count / 8);
    // print_r($remaining);
    // print_r(ceil($count));
    if ($count > $remaining) {
        $validation_result['is_valid'] = false;

        //finding Field with ID of 1 and marking it as failed validation
        foreach ($form['fields'] as $field) {
            //NOTE: replace 1 with the field you would like to validate
            if ($field->id == '42') {
                $field->failed_validation = true;
                $field->validation_message = $message . " seats available for guest";
                break;
            }
        }
    }
    $coupon_name = $results[0]->coupon;
    // echo $coupon_name;
    // echo $coupon_used;
    // die;
    if ($coupon_used != $coupon_name) {

        foreach ($form['fields'] as $field) {
            //NOTE: replace 1 with the field you would like to validate
            if ($field->id == '60') {
                $field->failed_validation = true;
                $field->validation_message = "Invalid Coupon";
                break;
            }
        }


    }

    // print_r($validation_result );
    // echo "<pre>";
    // die;
    $validation_result['form'] = $form;
    return $validation_result;
}

//add_filter( 'template_include', 'portfolio_page_template', 99 );
function portfolio_page_template($template)
{
    echo $template;
    if (is_page('portfolio')) {
        $new_template = locate_template(array('portfolio-page-template.php'));
        if ('' != $new_template) {
            return $new_template;
        }
    }
    return $template;
}

// add_action( 'wcs_daily_clean_database', 'three_day_before_email' );

// wp_schedule_event( time(), 'daily', 'wcs_daily_clean_database' );

function three_day_before_email()
{
    global $wpdb;
    $data = $wpdb->get_results("SELECT wp_acf_data.e_start,wp_gf_custom.email FROM `wp_gf_custom` LEFT JOIN wp_acf_data ON wp_gf_custom.guest_ticket_id=wp_acf_data.id WHERE DATE_ADD(date(wp_acf_data.e_start) , INTERVAL -3 DAY) = CURRENT_DATE()");
    foreach ($data as $key => $value) {
        $headers = "";
        $message = "";
        $headers .= "MIME-Version: 1.0\r\n";
        $headers .= "From: WeLFlorida <info@welflorida.org>\r\n";
        $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
        $message .= "<p style='text-align: center; padding: 10px 0; margin: 0;'><img class='size-full wp-image-11558 aligncenter' src='" . home_url('/wp-content/uploads/2020/08/logo.png') . "' alt='' width='189' height='65' /></p>";
        $message .= get_option('options_message_three_day');
        $message .= "<p style='text-align: center;  padding: 10px 0;'>© 2020 WeLFlorida | All rights reserved</p>";
        $subject = get_option('options_subject_three_day');
        $user_email = $value->email;
        wp_mail($user_email, $subject, $message, $headers);

    }

}

//add_action('gform_pre_render_3', 'gf_scroll_to_first_error_focus', 10, 1);
function gf_scroll_to_first_error_focus($form)
{
    ?>
    <script type="text/javascript">
        if (window['jQuery']) {
            (function ($) {
                $(document).bind('gform_post_render', function () {
                    var firstError = $('li.gfield.gfield_error:first');
                    if (firstError.length > 0) {

                        firstError.find('input, select, textarea').eq(0).focus();
                        document.body.scrollTop = firstError.offset().top;

                    }
                });
            })(jQuery);
        }
    </script>
    <?php
    return $form;
}

// Allow PDF uploads
add_filter('mepr_upload_mimes', 'alter_mepr_upload_mimes', 1);
function alter_mepr_upload_mimes($mimes)
{
    $mimes['pdf'] = 'application/pdf';

    return $mimes;
}

// add_action('mepr-account-home-fields', 'mpdn_show_on_account');
function mpdn_show_on_account($user)
{
    // $user = wp_get_current_user();
    // $user_data=get_user_meta($user->ID);
    // $bio_resume='';
    // $mepr_image='';
    //      if($user_data['mepr_bio_resume'][0]){
    //      	$bio_resume=$user_data['mepr_bio_resume'][0];
    //      };
    //      if($user_data['mepr_image'][0]){
    //      	$mepr_image=$user_data['mepr_image'][0];
    //      };


}

// add_filter( 'gform_column_input_6_2_1', 'set_column', 10, 5 );
// function set_column( $input_info, $field, $column, $value, $form_id ) {
//     return array( 'type' => 'select', 'choices' => 'Fluent,Adequate,Basic' );
// }

// add_action('gform_after_submission_3', 'update_all_data', 10, 2);
// function update_all_data($entry, $form) {
// 	global $wpdb;
// 	if (is_user_logged_in() ) 
//     {			
//     	$user_id = get_current_user_id();
//         update_user_meta( $user_id, 'mepr_referred_by', $entry['23'] );
//         update_user_meta( $user_id, 'mepr_employment_status', $entry['3'] );
//         update_user_meta( $user_id, 'mepr_company', $entry['5'] );
//         update_user_meta( $user_id, 'mepr_position_title', $entry['40'] );
//         update_user_meta( $user_id, 'mepr_role', $entry['7'] );
//         update_user_meta( $user_id, 'mepr_company_flag', $entry['39'] );
//         update_user_meta( $user_id, 'mepr_business_phone_number', $entry['9'] );
//         update_user_meta( $user_id, 'mepr_mobile_phone_number', $entry['10'] );
//         update_user_meta( $user_id, 'mepr_primary_email', $entry['11'] );
//         update_user_meta( $user_id, 'mepr_alternate_email', $entry['12'] );
//         update_user_meta( $user_id, 'mepr_linkedin_id', $entry['19'] );
//         update_user_meta( $user_id, 'mepr_bio_resume', $entry['52'] );
//         update_user_meta( $user_id, 'mepr_member_type', $entry['13'] );
//         update_user_meta( $user_id, 'mepr_associate_of_partner', $entry['14'] );
//         update_user_meta( $user_id, 'mepr_professional_goals', $entry['20'] );
//         update_user_meta( $user_id, 'mepr_committee_interest', $entry['21'] );
//         update_user_meta( $user_id, 'mepr_member_of_wel_committee', $entry['22'] );
//         update_user_meta( $user_id, 'mepr_image', $entry['59'] );
//         update_user_meta( $user_id, 'mepr_first_name', $entry['2.3'] );
//         update_user_meta( $user_id, 'mepr_middle_name', $entry['2.4'] );
//         update_user_meta( $user_id, 'mepr_last_name', $entry['2.6'] );
//         update_user_meta( $user_id, 'mepr_address_option', $entry['43'] );
//         update_user_meta( $user_id, 'mepr_address', $entry['8.1'] );
//         update_user_meta( $user_id, 'mepr_address_line_2', $entry['8.2'] );
//         update_user_meta( $user_id, 'mepr_city', $entry['8.3'] );
//         update_user_meta( $user_id, 'mepr_state_province_region', $entry['8.4'] );
//         update_user_meta( $user_id, 'mepr_zip_postal_code', $entry['8.5'] );
//         update_user_meta( $user_id, 'mepr_country', $entry['8.6'] );
//         update_user_meta( $user_id, 'mepr_company_address_line_1', $entry['42.1'] );
//         update_user_meta( $user_id, 'mepr_company_address_line_2', $entry['42.2'] );
//         update_user_meta( $user_id, 'mepr_company_city', $entry['42.3'] );
//         update_user_meta( $user_id, 'mepr_company_state_province_region', $entry['42.4'] );
//         update_user_meta( $user_id, 'mepr_company_zip_postal_code', $entry['42.5'] );
//         update_user_meta( $user_id, 'mepr_company_country', $entry['42.6'] );
//     } 
// }
//add_filter('gform_multiselect_placeholder_3_66', 'set_multiselect_placeholder_66', 10, 2);
function set_multiselect_placeholder_66($placeholder, $form_id)
{
    return 'Committee Interest';
}

//add_filter('gform_multiselect_placeholder_3_64', 'set_multiselect_placeholder_64', 11, 2);
function set_multiselect_placeholder_64($placeholder, $form_id)
{
    return 'Member of WEL Committee';
}

// if ( !function_exists('my_login_page') ) :
// 	add_filter( 'login_url', 'my_login_page', 10, 3 );
// 	function fa_login_page( $login_url, $redirect, $force_reauth ) {
// 		$login_page = home_url( '/login/' );
// 		if ( ! empty( $redirect ) ) {
// 			$login_url = add_query_arg( 'redirect_to', urlencode( $redirect ), $login_page );
// 		}
// 		return $login_url;
// 	}
// endif;

// add_filter( 'gform_countries', 'cf_gform_countries');
// function cf_gform_countries( $countries ) {
// 	$countries = array('Afghanistan', 'Albania', 'Algeria', 'American Samoa', 'Andorra', 'Angola', 'Anguilla', 'Antarctica', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia', 'Bonaire, Sint Eustatius and Saba', 'Bosnia and Herzegovina', 'Botswana', 'Bouvet Island', 'Brazil', 'British Indian Ocean Territory', 'Brunei Darussalam', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde', 'Cayman Islands', 'Central African Republic', 'Chad', 'Chile', 'China', 'Christmas Island', 'Cocos Islands', 'Colombia', 'Comoros', 'Congo, Democratic Republic of the', 'Congo, Republic of the', 'Cook Islands', 'Costa Rica', 'Croatia', 'Cuba', 'Curaçao', 'Cyprus', 'Czech Republic', 'Côte d\'Ivoire', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Eswatini (Swaziland)', 'Ethiopia', 'Falkland Islands', 'Faroe Islands', 'Fiji', 'Finland', 'France', 'French Guiana', 'French Polynesia', 'French Southern Territories', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Gibraltar', 'Greece', 'Greenland', 'Grenada', 'Guadeloupe', 'Guam', 'Guatemala', 'Guernsey', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Heard and McDonald Islands', 'Holy See', 'Honduras', 'Hong Kong', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland', 'Isle of Man', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati', 'Kuwait', 'Kyrgyzstan', 'Lao People\'s Democratic Republic', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macau', 'Macedonia', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Martinique', 'Mauritania', 'Mauritius', 'Mayotte', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Montserrat', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal', 'Netherlands', 'New Caledonia', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'Niue', 'Norfolk Island', 'North Korea', 'Northern Mariana Islands', 'Norway', 'Oman', 'Pakistan', 'Palau', 'Palestine, State of', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Pitcairn', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar', 'Romania', 'Russia', 'Rwanda', 'Réunion', 'Saint Barthélemy', 'Saint Helena', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Martin', 'Saint Pierre and Miquelon', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Sint Maarten', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa', 'South Georgia', 'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Svalbard and Jan Mayen Islands', 'Sweden', 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tokelau', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan', 'Turks and Caicos Islands', 'Tuvalu', 'US Minor Outlying Islands', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam', 'Virgin Islands, British', 'Virgin Islands, U.S.', 'Wallis and Futuna', 'Western Sahara', 'Yemen', 'Zambia', 'Zimbabwe', 'Åland Islands');

// 	$mycountries = array();
// 	foreach ($countries as $country) {
// 		$mycountries[ str_replace(' ', '-', strtolower($country)) ] = $country;
// 	}

// 	return $mycountries;
// }

add_filter('gform_address_display_format', 'address_format', 10, 2);
function address_format($format, $field)
{
    return 'zip_before_city';
}

// add_action( 'gform_after_submission_3', 'after_submission_member_form', 10, 2 );
// function after_submission_member_form( $entry, $form ){
// 	// echo "<pre>";
// 	// print_r($entry);
// 	// die;
// 	$data=$entry['66'];
// 	$committee_interest=str_replace(array( '[', ']','"' ), '', $data);
// 	$committee_interest=maybe_serialize($committee_interest);
// 	update_user_meta(1,'mepr_member_of_wel_committee',$committee_interest);	
// }
add_action('gform_activate_user', 'after_user_activate', 10, 3);
function after_user_activate($user_id, $user_data, $signup_meta)
{

    $get_data = get_user_meta($user_id, 'mepr_committee_interest', true);
    if (is_string($get_data))
        eval("\$get_data = $get_data;");

// 	// $committee_interest=str_replace(array( '[', ']','"' ), '', $get_data);
    if (is_array($get_data)) {
        $get_data = serialize($get_data);
    }


    global $wpdb;
    $wpdb->query("UPDATE $wpdb->usermeta SET meta_value = '$get_data' WHERE user_id = '$user_id' AND meta_key = 'mepr_committee_interest' ");

// 	// $wpdb->update($wpdb->usermeta, array('meta_key' => 'mepr_committee_interest', 'meta_value' => $committee_interest_serialize), array('user_id' => $user_id));


}

add_action('wp_ajax_enroll_list_summary', 'export_enroll_list_summary_csv');
function export_enroll_list_summary_csv()
{
    global $wpdb;
    $status = 0;
    $checked = $_POST['checked'];
    $name = 'Event_Enroll_List';
    $event_id = $_POST['event_id'];
    // if ($checked == 'true') {
    // 	$status = ' AND co.withdraw_status = 1';
    // 	$name = 'Event_Enroll_List';

    // }
    // elseif ($checked == 'false') {
    // 	$status = '';
    // }
    $data = array();
    $heading = array('Entry ID', 'Event Name', 'Buyer Name', 'Email', 'User Type', 'Price', 'Transaction Id', 'Payment Gateway', 'Address', 'Date', 'Total Tickets Count');
    $post_id = $_POST['post_id'];

    $_where = " WHERE 1=1 ";
    if ($event_id) {
        $_where .= " AND event_id = '$event_id' ";
    }
    $post_name = get_the_title($post_id);
    $enroll_query = $wpdb->get_results(" SELECT * FROM `wp_gf_custom` $_where  ");

    // $enroll_query = $wpdb->get_results(" SELECT co.* FROM `$this->tbl_course` co LEFT JOIN $wpdb->usermeta um ON co.user_id = um.user_id
    // 							WHERE co.status = 1 $status AND co.post_id = '$post_id' AND um.meta_key = 'last_name' ORDER BY um.meta_value ASC ");
    // $course_data = $this->course_meta_data($post_id);

    foreach ($enroll_query as $key => $course) {
        $resultstwo = $wpdb->get_results("SELECT COUNT(entry_id) as totalticket FROM wp_gf_custom_child WHERE entry_id='" . $course->id . "'");
        $data[$key]['Entry ID'] = $course->id;
        $data[$key]['Event Name'] = $post_name;
        $data[$key]['Buyer Name'] = $course->b_name;

        $data[$key]['Email'] = $course->email;
        $data[$key]['User Type'] = $course->member_guest;
        $data[$key]['Price'] = $course->price;
        $data[$key]['Transaction Id'] = $course->transaction_id;
        $data[$key]['Payment Gateway'] = $course->payment_gateway;
        $data[$key]['Address'] = $course->address;
        $data[$key]['Date'] = $course->created_at;

        $data[$key]['Total Tickets Count'] = $resultstwo[0]->totalticket;
    }
    // $wp_upload_dir = wp_upload_dir();
    // echo "<pre>";
    // print_r( $data );
    // echo "<pre>";

    $path = generate_csv($name, $heading, $data);
    die($path);

}

function generate_csv($name, $heading, $data)
{

    $filename = ($name . '_' . date_i18n('d_M_Y') . '.csv');

    $wp_upload_dir = wp_upload_dir();
    //$this->_pre($upload_dir, 1);
    $upload_dir = $wp_upload_dir['basedir'] . '/eventlisting/';
    $upload_url = $wp_upload_dir['baseurl'] . '/eventlisting/';
    $file_path = $upload_dir . $filename;
    $file_url = $upload_url . $filename;

    if (!is_dir($upload_dir)) {
        mkdir($upload_dir);
    }

    $fp = @fopen($file_path, 'w');

    fputcsv($fp, $heading);

    foreach ($data as $res) {
        fputcsv($fp, $res);
    }

    //file_put_contents($filename, @$csv_output);

    fclose($fp);

    return ($file_url);
}

add_action('wp_logout', 'remove_login_popup_message');


function remove_login_popup_message()
{
    if (isset($_COOKIE['name'])) {
        unset($_COOKIE['name']);
        setcookie('name', null, -1, '/');

        return true;
    } else {
        return false;
    }
}

add_action('restrict_manage_posts', 'tsm_filter_post_type_by_taxonomy');
function tsm_filter_post_type_by_taxonomy()
{
    global $typenow;
    $post_type = 'events'; // change to your post type
    $taxonomy = 'events-cat'; // change to your taxonomy
    if ($typenow == $post_type) {
        $selected = isset($_GET[$taxonomy]) ? $_GET[$taxonomy] : '';
        $info_taxonomy = get_taxonomy($taxonomy);
        wp_dropdown_categories(array(
            'show_option_all' => sprintf(__('Show all %s', 'textdomain'), $info_taxonomy->label),
            'taxonomy' => $taxonomy,
            'name' => $taxonomy,
            'orderby' => 'name',
            'selected' => $selected,
            'show_count' => true,
            'hide_empty' => true,
        ));
    };
}

add_filter('parse_query', 'tsm_convert_id_to_term_in_query');
function tsm_convert_id_to_term_in_query($query)
{
    global $pagenow;
    $post_type = 'events'; // change to your post type
    $taxonomy = 'events-cat'; // change to your taxonomy
    $q_vars = &$query->query_vars;
    if ($pagenow == 'edit.php' && isset($q_vars['post_type']) && $q_vars['post_type'] == $post_type && isset($q_vars[$taxonomy]) && is_numeric($q_vars[$taxonomy]) && $q_vars[$taxonomy] != 0) {
        $term = get_term_by('id', $q_vars[$taxonomy], $taxonomy);
        $q_vars[$taxonomy] = $term->slug;
    }
}


add_action('mepr_subscription_transition_status', 'mepr_subscription_transition_status_fn', 10, 3);
function mepr_subscription_transition_status_fn($old_status, $new_status, $sub)
{

    $user_id = $sub->user_id;
    $membership_id = $sub->product_id;
    $new_subscription_status = $new_status;
    $old_subscription_status = $old_status;
    $current_user = wp_get_current_user();
    $current_user_email = $current_user->user_email;
    $subject = "CONGRATULATIONS ON YOUR WEL DIAMOND MEMBERSHIP.";
    $headers .= "MIME-Version: 1.0\r\n";
    $headers .= "From: WeLFlorida <raza.kingdomvision@gmail.com>\r\n";
    $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
    $message = "<table cellpadding='0' cellspacing='0' width='100' bgcolor='#cfcfcf' style='width: 100%; background-color: #cfcfcf;' >
		<tbody>
		<tr>
		<td>
		<table cellpadding='0' cellspacing='0' width='640px' bgcolor='#cfcfcf' style='width: 640px; background-color: #fff; margin: 0 auto; padding: 0 15px; font-family: Sans-serif;' >
		<tbody>
		<tr height='10px' style='height: 10px; line-height: 10px;'>
		<td>&nbsp;</td>
		</tr>
		<tr>
		<td>
		<img src='https://welflorida.org/wp-content/uploads/2021/01/wel-logo.png' alt='logo' width='250' height='80' style='display: block; margin: 0 auto;'>
		</td>
		</tr>
		<tr>
		<td>
		<h3>CONGRATULATIONS ON YOUR WEL DIAMOND MEMBERSHIP.</h3>
		</td>
		</tr>
		<tr>
		<td>You are part of an elite group of successful women executives who want to further their career & expand their network. Your WEL Diamond Membership provides you with way more than just our Charter Membership plus Athena Alliance Self-Service Membership—it offers additional valuable services and programs to accelerate your career as well as offers extra benefits and discounts.</td>
		</tr>
		<tr>
		<td>
		<h3 style='margin-bottom: 0;'>YOUR WEL DIAMOND MEMBERSHIP INCLUDES:</h3>
		</td>
		</tr>
		<tr height='10px' style='height: 10px; line-height: 10px;'>
		<td>&nbsp;</td>
		</tr>
		<tr>
		<td>
		<table cellpadding='0' cellspacing='0' width='100%' style='width: 100%;' border='1'>
		<tbody>
		<tr bgcolor='#00B0F0' style='background-color: #00B0F0; color: #fff;'>
		<td colspan='2' style='padding: 5px;'>WOMEN EXECUTIVE LEADERSHIP | welflorida.org</td>

		</tr>
		<tr>
		<td style='padding: 5px;'>Virtual & In-person Programs</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Educational Workshops </td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Members-Only Edutainment Events</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Members-Only Dinners</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Member Directory</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Executive & Board Candidate Searches</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Annual Signature Event</td>
		<td style='padding: 5px;'>Enhanced Preferred Pricing & Seating</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Board Boot Camps</td>
		<td style='padding: 5px;'>Enhanced Preferred Pricing</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>BoardEx Profile Listing BoardEx.com “Go To” Resource for Board Recruiters </td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Bio & LinkedIn Review*</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>One-On-One with WEL Advisory Board Member**</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr bgcolor='#00B0F0' style='background-color: #00B0F0; color: #fff;'>
		<td colspan='2' style='padding: 5px;'>ATHENA ALLIANCE | athenaalliance.com</td>

		</tr>
		<tr>
		<td colspan='2' style='padding: 5px;'>In the next 72 hours, you will receive a Welcome Email from Athena Alliance with instructions on how to access their Membership Portal and the resources provided by Athena.</td>

		</tr>
		<tr>
		<td style='padding: 5px;'>Virtual Educational Workshops</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Online Learning Library</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Executive & Board Candidate Searches</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Member Directory with Concierge Support introductions & Connections to Athena Members</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		<tr>
		<td style='padding: 5px;'>Executive & Board Candidate Searches</td>
		<td style='padding: 5px;'>Complimentary</td>
		</tr>
		</tbody>
		</table>
		</td>
		</tr>
		<tr height='20px' style='height: 20px; line-height: 20px;'>
		<td>&nbsp;</td>
		</tr>
		<tr>
		<td>
		<strong>* RESUME & LINKEDIN REVIEW</strong> Provided by Scott Singer, <a href='mailto:scott.singer@insidercs.com'>scott.singer@insidercs.com</a>
		Scott’s services include: One 30-minute phone or virtual discussion, followed by his written recommendations to enhance your Bio & LinkedIn Profile.
		</td>
		</tr>
		<tr height='20px' style='height: 20px; line-height: 20px;'>
		<td>&nbsp;</td>
		</tr>
		<tr>
		<td>
		<strong>** ONE-ON-ONE HOUR WITH AN ADVISORY BOARD MEMBER</strong> Contact Meredith Williams, mwilliams@premierfilings.com, when you are ready to schedule your One-On-One.
		</td>
		</tr>
		<tr height='20px' style='height: 20px; line-height: 20px;'>
		<td>&nbsp;</td>
		</tr>
		<tr bgcolor='#000' style='background-color: #000; color: #fff;'>
		<td style='padding: 15px; text-align: center;'>
		Copyright ©2021. All Rights Reserved | Designed & Developed by <a href='https://kingdom-vision.com/' target='_blank' style=' color: #00B0F0;'>Kingdom Vision</a>
		</td>
		</tr>
		<tr height='10px' style='height: 10px; line-height: 10px;'>
		<td>&nbsp;</td>
		</tr>
		</tbody>
		</table>
		</td>
		</tr>

		</tbody>
		</table>";
    if ($membership_id == 19975 && $new_subscription_status == 'active') {
        wp_mail($current_user_email, $subject, $message, $headers);
    }
}

function get_active_product_subscription_custom($user_id)
{
    global $wpdb;
    $total_ids = array(19974, 19975);
    $found = false;
    $result = $wpdb->get_results("SELECT COUNT(id) AS total FROM `wp_mepr_subscriptions` WHERE user_id = $user_id AND status = 'active' AND  product_id IN (19975,19974)");
    // print_r($result);
    // die;
    if ($result[0]->total == 2) {
        $found = true;
    }
    return $found;
}

function is_active_charter_subscription($user_id)
{
    $user = MeprUtils::get_currentuserinfo();
    if ($user) {
        return in_array(19974, $user->active_product_subscriptions('ids'));

    }
    return false;
}

function get_single_active_product_subscription_custom($user_id)
{
    $user = MeprUtils::get_currentuserinfo();
    if ($user) {
        return in_array(19975, $user->active_product_subscriptions('ids'));
    }
    return false;
}


// This adds display names for all users to a drop down box on a gravity form.
add_filter("gform_pre_render", "populate_userdrop");

//Note: when changing drop down values, we also need to use the gform_admin_pre_render so that the right values are displayed when editing the entry.
add_filter("gform_admin_pre_render", "populate_userdrop");

function populate_userdrop($form)
{

    //only populating drop down for form id 1 - if editing this change to your own form ID
    if ($form["id"] == 15) {

        //Creating item array.
        $items = array();
        // Get the custom field values stored in the array
        // If editing this lookup where you would like to get your data from
        // this example loads through all users of the website
        $metas = get_users();

        if (is_array($metas)) {
// in this example we just load the display_name for each user into our drop-down field
            foreach ($metas as $meta) $items[] = array("value" => $meta->id, "text" => $meta->display_name);
        }

        $events = array();

        $args = array(
            'post_status' => 'publish',
            'post_type' => 'events',
            'posts_per_page' => -1,
            'meta_key' => 'latest_announcement',
            'orderby' => 'meta_value',
            'order' => 'DESC',
            'tax_query' => array(
                array(
                    'taxonomy' => 'events-cat',
                    'field' => 'slug',
                    'terms' => array('private-events'),
                    'operator' => 'NOT IN'
                )
            )
        );
        $query = new WP_Query($args);
        if ($query->have_posts()) :
            while ($query->have_posts()) : $query->the_post();
                $events[] = array("value" => get_the_id(), "text" => get_the_title());
            endwhile;
            wp_reset_postdata();
        endif;


        //Adding items to field id 1. Replace 1 with your actual field id. You can get the field id by looking at the input name in the markup.
        foreach ($form["fields"] as &$field) {
            if ($field["id"] == 68) {
                $field["choices"] = $items;
            }
            if ($field["id"] == 69) {
                $field["choices"] = $events;
            }
        }

    }

    //only populating drop down for form id 1 - if editing this change to your own form ID
    if ($form["id"] == 18 && false && isset($_GET['membership']) && isset($_GET['level'])) {

        //Adding items to field id 1. Replace 1 with your actual field id. You can get the field id by looking at the input name in the markup.
        foreach ($form["fields"] as &$field) {
            if ($field["id"] == 92) {
                $choices = array();
                foreach ($field['choices'] as $choice) {
                    if (@$_GET['membership'] == 'charter' && $choice['value'] == 'welflorida-charter-membership') {
                        $choice['isSelected'] = true;
                    }
                    if (@$_GET['membership'] == 'diamond' && $choice['value'] == 'welflorida-diamond-membership') {
                        $choice['isSelected'] = true;
                    }
                    $choices [] = $choice;
                }
                $field['choices'] = $choices;
//                pre($choices, 1);
//                die;
            }
        }
    }

    return $form;
}

add_action('gform_after_submission_15', 'register_event_add_entry_to_db', 10, 2);

function register_event_add_entry_to_db($entry, $form)
{
    global $wpdb;
    $data_to_insert = array(
        'user_id' => $entry['68'],
        'event_id' => $entry['69'],
        'ticket_id' => 0,
        'guest_ticket_id' => 0,
        'member_guest' => $entry['71'],
        'b_name' => $entry['2.3'] . " " . $entry['2.4'] . " " . $entry['2.6'],
        'company' => $entry['12'],
        'position' => $entry['59'],
        'role' => $entry['56'],
        'phone' => $entry['3'],
        'price' => $entry['65'],
        'transaction_id' => $entry['66'],
        'payment_gateway' => 'Manual',
        'address' => $entry['4.1'] . " " . $entry['4.2'] . " " . $entry['4.3'] . " " . $entry['4.4'] . " " . $entry['4.5'],
        'option_in_out' => 0,
        'email' => $entry['8'],
        'created_at' => $entry['date_created'],
    );
    $wpdb->insert('wp_gf_custom', $data_to_insert);

    $post_id = $entry['69'];
    $post_title_name = get_the_title($post_id);
    $uid = $entry['68'];
    $user_name = $entry['2.3'] . " " . $entry['2.6'];
    $start_date = get_field("start_date", $entry["post_id"]);
    $date = date('m-d-Y', strtotime($start_date));
    $time = date('h:i:s a', strtotime($start_date));
    $results = $wpdb->get_results(" SELECT * from wp_acf_data WHERE post_id='" . $post_id . "' AND available_for ='member' AND status=1");
    $location = $results[0]->location;
    $user_email = rgar($entry, '8');

    $title_name = sanitize_title($post_title_name);
    // $uid = $post_id;
    $filename = $title_name . "-" . $uid . ".ics";
    $message_url = get_stylesheet_directory_uri() . '/eventicsfiles/' . $filename;
    $message_outlook = $message_url;

    // $user_email = $user_email;
    $headers = "";
    $message = "";
    $headers .= "MIME-Version: 1.0\r\n";
    $headers .= "From: WeLFlorida <info@welflorida.org>\r\n";
    $headers .= "Content-Type: text/html; charset=UTF-8\r\n";
    $message .= "";
    $message .= "<p style='text-align: center; padding: 10px 0; margin: 0;'><img class='size-full wp-image-11558 aligncenter' src='" . home_url('/wp-content/uploads/2021/01/wel-logo.png') . "' alt='' width='250' height='80' /></p>";

    $message .= "<div style='width:550px; margin:0 auto;  padding: 10px;' class='main_row container-full'><div class='body'>
						<h3>Dear $user_name</h3>
						<p><strong>Thank you for registering for $post_title_name</strong></p>
						<p>Date: $date </p>
						<p>Time: $time</p>
						<p>Location: $location</p>
						<p>Add to Google:  <a href='$message_url'>Click Follow Link To Add Google Calendar.</a></p>
						<p>Add to Outlook:  <a href='$message_outlook'>Click Follow Link To Add Outlook Calendar.</a></p>
						<p>Please contact WEL’s Administrator, Meredith Williams at:  <a href='mailto:info@welflorida.org' target='_blank'>info@welflorida.org</a> if you need any assistance.</p>
						<p>Thank you.</p>
						</div>
						<div  style='text-align: center; color: #fff; background: #000; padding: 5px 0;''>
							<p>Copyright ©2020 All right Reserved</p>
						</div>
						</div>";


    $subject = "You are registered";
    wp_mail($user_email, $subject, $message, $headers);
    // end add calender send mail to user
}

function pre($d = '', $t = 0)
{
    echo '<pre>' . print_r($d, $t) . '</pre>';
}

function mepr_account_subscriptions_actions($user, $sub, $txn, $is_sub)
{
    if ($is_sub && $sub->status === 'active') {
        $sub = new MeprSubscription($sub->id);
//        pre(get_class_methods($sub), 1);
//        pre($sub->transactions(),1);
//        pre($sub->user()->subscriptions()[0]->id, 1);
//        $sub->destroy();
        if ($sub->product()->ID === 19974) {
            echo '<a href="' . get_permalink(19975) . '" class="mepr-account-row-action mepr-account-change">Upgrade To Diamond</a>';
        } elseif ($sub->product()->ID === 19975) {
            echo '<a href="' . get_permalink(19974) . '" class="mepr-account-row-action mepr-account-change">Downgrade To Charter</a>';
        }
    }
}

add_action('mepr-account-subscriptions-actions', 'mepr_account_subscriptions_actions', 10, 4);
function mepr_capture_new_recurring_sub($sub_id)
{
    $sub = new MeprSubscription($sub_id);
    MeprEvent::record('subscription-created', $sub);
    foreach ($sub->user()->subscriptions() as $subscription) {
        if ($subscription->id === $sub_id) {
            continue;
        }
        $subscription->cancel();
    }
//    pre($sub);
//    die;
    return $sub_id;
}
//add_filter('mepr_create_subscription', 'mepr_capture_new_recurring_sub', 99, 1);
